// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("uAddress", Value.fromBytes(Bytes.empty()));
    this.set("name", Value.fromString(""));
    this.set("image", Value.fromString(""));
    this.set("twitterUrl", Value.fromString(""));
    this.set("websiteUrl", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save User entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get uAddress(): Bytes {
    let value = this.get("uAddress");
    return value!.toBytes();
  }

  set uAddress(value: Bytes) {
    this.set("uAddress", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get image(): string {
    let value = this.get("image");
    return value!.toString();
  }

  set image(value: string) {
    this.set("image", Value.fromString(value));
  }

  get twitterUrl(): string {
    let value = this.get("twitterUrl");
    return value!.toString();
  }

  set twitterUrl(value: string) {
    this.set("twitterUrl", Value.fromString(value));
  }

  get websiteUrl(): string {
    let value = this.get("websiteUrl");
    return value!.toString();
  }

  set websiteUrl(value: string) {
    this.set("websiteUrl", Value.fromString(value));
  }
}

export class Collection extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("cAddress", Value.fromBytes(Bytes.empty()));
    this.set("name", Value.fromString(""));
    this.set("image", Value.fromString(""));
    this.set("creator", Value.fromBytes(Bytes.empty()));
    this.set("nItems", Value.fromI32(0));
    this.set("volumeOfEth", Value.fromI32(0));
    this.set("metadata", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Collection entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Collection entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Collection", id.toString(), this);
    }
  }

  static load(id: string): Collection | null {
    return changetype<Collection | null>(store.get("Collection", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get cAddress(): Bytes {
    let value = this.get("cAddress");
    return value!.toBytes();
  }

  set cAddress(value: Bytes) {
    this.set("cAddress", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get image(): string {
    let value = this.get("image");
    return value!.toString();
  }

  set image(value: string) {
    this.set("image", Value.fromString(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value!.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get nItems(): i32 {
    let value = this.get("nItems");
    return value!.toI32();
  }

  set nItems(value: i32) {
    this.set("nItems", Value.fromI32(value));
  }

  get volumeOfEth(): i32 {
    let value = this.get("volumeOfEth");
    return value!.toI32();
  }

  set volumeOfEth(value: i32) {
    this.set("volumeOfEth", Value.fromI32(value));
  }

  get metadata(): string {
    let value = this.get("metadata");
    return value!.toString();
  }

  set metadata(value: string) {
    this.set("metadata", Value.fromString(value));
  }
}

export class NFT extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("cAddress", Value.fromBytes(Bytes.empty()));
    this.set("tokenId", Value.fromI32(0));
    this.set("name", Value.fromString(""));
    this.set("image", Value.fromString(""));
    this.set("properties", Value.fromString(""));
    this.set("cName", Value.fromString(""));
    this.set("cImage", Value.fromString(""));
    this.set("creator", Value.fromBytes(Bytes.empty()));
    this.set("owner", Value.fromBytes(Bytes.empty()));
    this.set("metadata", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFT entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save NFT entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("NFT", id.toString(), this);
    }
  }

  static load(id: string): NFT | null {
    return changetype<NFT | null>(store.get("NFT", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get cAddress(): Bytes {
    let value = this.get("cAddress");
    return value!.toBytes();
  }

  set cAddress(value: Bytes) {
    this.set("cAddress", Value.fromBytes(value));
  }

  get tokenId(): i32 {
    let value = this.get("tokenId");
    return value!.toI32();
  }

  set tokenId(value: i32) {
    this.set("tokenId", Value.fromI32(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get image(): string {
    let value = this.get("image");
    return value!.toString();
  }

  set image(value: string) {
    this.set("image", Value.fromString(value));
  }

  get properties(): string {
    let value = this.get("properties");
    return value!.toString();
  }

  set properties(value: string) {
    this.set("properties", Value.fromString(value));
  }

  get cName(): string {
    let value = this.get("cName");
    return value!.toString();
  }

  set cName(value: string) {
    this.set("cName", Value.fromString(value));
  }

  get cImage(): string {
    let value = this.get("cImage");
    return value!.toString();
  }

  set cImage(value: string) {
    this.set("cImage", Value.fromString(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value!.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get metadata(): string {
    let value = this.get("metadata");
    return value!.toString();
  }

  set metadata(value: string) {
    this.set("metadata", Value.fromString(value));
  }
}

export class Bid extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("cAddress", Value.fromBytes(Bytes.empty()));
    this.set("tokenId", Value.fromI32(0));
    this.set("from", Value.fromBytes(Bytes.empty()));
    this.set("price", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Bid entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Bid entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Bid", id.toString(), this);
    }
  }

  static load(id: string): Bid | null {
    return changetype<Bid | null>(store.get("Bid", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get cAddress(): Bytes {
    let value = this.get("cAddress");
    return value!.toBytes();
  }

  set cAddress(value: Bytes) {
    this.set("cAddress", Value.fromBytes(value));
  }

  get tokenId(): i32 {
    let value = this.get("tokenId");
    return value!.toI32();
  }

  set tokenId(value: i32) {
    this.set("tokenId", Value.fromI32(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get price(): i32 {
    let value = this.get("price");
    return value!.toI32();
  }

  set price(value: i32) {
    this.set("price", Value.fromI32(value));
  }
}

export class NFTEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("cAddress", Value.fromBytes(Bytes.empty()));
    this.set("tokenId", Value.fromI32(0));
    this.set("eventType", Value.fromString(""));
    this.set("from", Value.fromBytes(Bytes.empty()));
    this.set("to", Value.fromBytes(Bytes.empty()));
    this.set("price", Value.fromI32(0));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFTEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save NFTEvent entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("NFTEvent", id.toString(), this);
    }
  }

  static load(id: string): NFTEvent | null {
    return changetype<NFTEvent | null>(store.get("NFTEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get cAddress(): Bytes {
    let value = this.get("cAddress");
    return value!.toBytes();
  }

  set cAddress(value: Bytes) {
    this.set("cAddress", Value.fromBytes(value));
  }

  get tokenId(): i32 {
    let value = this.get("tokenId");
    return value!.toI32();
  }

  set tokenId(value: i32) {
    this.set("tokenId", Value.fromI32(value));
  }

  get eventType(): string {
    let value = this.get("eventType");
    return value!.toString();
  }

  set eventType(value: string) {
    this.set("eventType", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get price(): i32 {
    let value = this.get("price");
    return value!.toI32();
  }

  set price(value: i32) {
    this.set("price", Value.fromI32(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}
